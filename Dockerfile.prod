FROM php:7.3.6-fpm-alpine3.10

RUN apk add --no-cache $PHPIZE_DEPS \
                       curl \
                       gnupg \
                       git \
                       bash \
                       openssl \
                       nginx \
                       nodejs \
                       npm \
                       unixodbc-dev

RUN mkdir -p /run/nginx && \
    echo "pid /run/nginx.pid;" >> /etc/nginx/nginx.conf

RUN curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/msodbcsql17_17.5.2.2-1_amd64.apk \
    && \
    curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/mssql-tools_17.5.2.1-1_amd64.apk \
    && \
    curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/msodbcsql17_17.5.2.2-1_amd64.sig \
    && \
    curl -O https://download.microsoft.com/download/e/4/e/e4e67866-dffd-428c-aac7-8d28ddafb39b/mssql-tools_17.5.2.1-1_amd64.sig \
    && \
    curl https://packages.microsoft.com/keys/microsoft.asc  | gpg --import - \
    && \
    gpg --verify msodbcsql17_17.5.2.2-1_amd64.sig msodbcsql17_17.5.2.2-1_amd64.apk \
    && \
    gpg --verify mssql-tools_17.5.2.1-1_amd64.sig mssql-tools_17.5.2.1-1_amd64.apk \
    && \
    apk add --allow-untrusted msodbcsql17_17.5.2.2-1_amd64.apk \
    && \
    apk add --allow-untrusted mssql-tools_17.5.2.1-1_amd64.apk


RUN docker-php-ext-install pdo
RUN pecl install sqlsrv pdo_sqlsrv
RUN docker-php-ext-enable sqlsrv pdo_sqlsrv

ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz


RUN ln -s /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

WORKDIR /var/www

RUN rm -rf /var/www/html && ln -s public html

RUN rm /etc/nginx/conf.d/default.conf
COPY .docker/nginx/nginx.prod.conf /etc/nginx/conf.d/nginx.conf

COPY . .
RUN composer install
RUN chmod -R 777 /var/www/storage && chmod -R 777 /var/www/bootstrap/cache

EXPOSE 80
ENTRYPOINT [ ".docker/entrypoint.prod.sh" ]